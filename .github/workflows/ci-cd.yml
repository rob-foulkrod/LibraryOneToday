name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

permissions:
  contents: read
  packages: write
  actions: read

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'LibraryOne/LibraryOneOne.csproj'
  TEST_PROJECT_PATH: 'LibraryOne.Tests/LibraryOneOne.Tests.csproj'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      

  publish-nuget:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Set version for release
      if: github.event_name == 'release'
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Set version for main branch
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        VERSION="1.0.0-alpha.${{ github.run_number }}"
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Set fallback version
      if: github.event_name != 'release' && github.ref != 'refs/heads/main'
      run: |
        VERSION="1.0.0-dev.${{ github.run_number }}"
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Create artifacts directory
      run: mkdir -p ./artifacts
        
    - name: Pack NuGet package
      run: |
        echo "Packing with version: ${{ env.PACKAGE_VERSION }}"
        echo "Repository: ${{ github.repository }}"
        echo "Owner: ${{ github.repository_owner }}"
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          -p:PackageVersion=${{ env.PACKAGE_VERSION }} \
          -p:RepositoryUrl=https://github.com/${{ github.repository }} \
          -p:RepositoryBranch=${{ github.ref_name }} \
          -p:RepositoryCommit=${{ github.sha }} \
          -p:PackageProjectUrl=https://github.com/${{ github.repository }}
          
    - name: List created packages
      run: ls -la ./artifacts/
          
    - name: Add GitHub Packages source
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text
          
    - name: Push to GitHub Packages
      run: |
        dotnet nuget push ./artifacts/*.nupkg \
          --source github \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate
          
    - name: Upload NuGet package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg
        retention-days: 30
